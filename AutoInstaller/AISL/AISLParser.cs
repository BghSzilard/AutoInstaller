//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from d:\Siemens\AutoInstaller\AutoInstaller\AISL\AISL.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class AISLParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, TYPE=19, WORD=20, QUOTED_TEXT=21, OPTIONAL=22, ANY=23, ANY_AND_ESCAPED_CURLY=24, 
		LINE_END=25, NEWLINE=26, WHITESPACE=27;
	public const int
		RULE_script = 0, RULE_findInstruction = 1, RULE_hasBlock = 2, RULE_parameterList = 3, 
		RULE_parameter = 4, RULE_nonChoiceParameter = 5, RULE_choiceParameter = 6, 
		RULE_defaultOrFixed = 7, RULE_defaultParamValue = 8, RULE_fixedParamValue = 9, 
		RULE_uninstallInstruction = 10, RULE_executeInstruction = 11, RULE_invokeInstallInstruction = 12, 
		RULE_invokeUninstallInstruction = 13, RULE_anything = 14, RULE_valueOrString = 15, 
		RULE_optionList = 16;
	public static readonly string[] ruleNames = {
		"script", "findInstruction", "hasBlock", "parameterList", "parameter", 
		"nonChoiceParameter", "choiceParameter", "defaultOrFixed", "defaultParamValue", 
		"fixedParamValue", "uninstallInstruction", "executeInstruction", "invokeInstallInstruction", 
		"invokeUninstallInstruction", "anything", "valueOrString", "optionList"
	};

	private static readonly string[] _LiteralNames = {
		null, "'FIND '", "' AT '", "'HAS ('", "') AS installation_parameters'", 
		"'    '", "','", "'choice '", "' FROM '", "' WITH DEFAULT '", "' = '", 
		"'UNINSTALL '", "'EXECUTE '", "'WITH installation_parameters'", "'INVOKE AS INSTALL {'", 
		"'} AT '", "'INVOKE AS UNINSTALL {'", "'['", "']'", null, null, null, 
		"'OPTIONAL '"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, "TYPE", "WORD", "QUOTED_TEXT", 
		"OPTIONAL", "ANY", "ANY_AND_ESCAPED_CURLY", "LINE_END", "NEWLINE", "WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AISL.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static AISLParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public AISLParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public AISLParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ScriptContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FindInstructionContext findInstruction() {
			return GetRuleContext<FindInstructionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExecuteInstructionContext executeInstruction() {
			return GetRuleContext<ExecuteInstructionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(AISLParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HasBlockContext hasBlock() {
			return GetRuleContext<HasBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UninstallInstructionContext uninstallInstruction() {
			return GetRuleContext<UninstallInstructionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InvokeInstallInstructionContext invokeInstallInstruction() {
			return GetRuleContext<InvokeInstallInstructionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InvokeUninstallInstructionContext invokeUninstallInstruction() {
			return GetRuleContext<InvokeUninstallInstructionContext>(0);
		}
		public ScriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_script; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAISLVisitor<TResult> typedVisitor = visitor as IAISLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScriptContext script() {
		ScriptContext _localctx = new ScriptContext(Context, State);
		EnterRule(_localctx, 0, RULE_script);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 34;
			findInstruction();
			State = 36;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2) {
				{
				State = 35;
				hasBlock();
				}
			}

			State = 39;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 38;
				uninstallInstruction();
				}
			}

			State = 41;
			executeInstruction();
			State = 43;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__13) {
				{
				State = 42;
				invokeInstallInstruction();
				}
			}

			State = 46;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__15) {
				{
				State = 45;
				invokeUninstallInstruction();
				}
			}

			State = 48;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FindInstructionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] QUOTED_TEXT() { return GetTokens(AISLParser.QUOTED_TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTED_TEXT(int i) {
			return GetToken(AISLParser.QUOTED_TEXT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINE_END() { return GetToken(AISLParser.LINE_END, 0); }
		public FindInstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_findInstruction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAISLVisitor<TResult> typedVisitor = visitor as IAISLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFindInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FindInstructionContext findInstruction() {
		FindInstructionContext _localctx = new FindInstructionContext(Context, State);
		EnterRule(_localctx, 2, RULE_findInstruction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50;
			Match(T__0);
			State = 51;
			Match(QUOTED_TEXT);
			State = 52;
			Match(T__1);
			State = 53;
			Match(QUOTED_TEXT);
			State = 54;
			Match(LINE_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HasBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(AISLParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINE_END() { return GetToken(AISLParser.LINE_END, 0); }
		public HasBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hasBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAISLVisitor<TResult> typedVisitor = visitor as IAISLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHasBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HasBlockContext hasBlock() {
		HasBlockContext _localctx = new HasBlockContext(Context, State);
		EnterRule(_localctx, 4, RULE_hasBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56;
			Match(T__2);
			State = 57;
			Match(NEWLINE);
			State = 58;
			parameterList();
			State = 59;
			Match(T__3);
			State = 60;
			Match(LINE_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(AISLParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(AISLParser.NEWLINE, i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAISLVisitor<TResult> typedVisitor = visitor as IAISLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 6, RULE_parameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 62;
				Match(T__4);
				State = 63;
				parameter();
				State = 64;
				Match(T__5);
				State = 65;
				Match(NEWLINE);
				}
				}
				State = 69;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__4 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ChoiceParameterContext choiceParameter() {
			return GetRuleContext<ChoiceParameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NonChoiceParameterContext nonChoiceParameter() {
			return GetRuleContext<NonChoiceParameterContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAISLVisitor<TResult> typedVisitor = visitor as IAISLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 8, RULE_parameter);
		try {
			State = 73;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 71;
				choiceParameter();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 72;
				nonChoiceParameter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonChoiceParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(AISLParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD() { return GetToken(AISLParser.WORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONAL() { return GetToken(AISLParser.OPTIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DefaultOrFixedContext defaultOrFixed() {
			return GetRuleContext<DefaultOrFixedContext>(0);
		}
		public NonChoiceParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonChoiceParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAISLVisitor<TResult> typedVisitor = visitor as IAISLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonChoiceParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NonChoiceParameterContext nonChoiceParameter() {
		NonChoiceParameterContext _localctx = new NonChoiceParameterContext(Context, State);
		EnterRule(_localctx, 10, RULE_nonChoiceParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONAL) {
				{
				State = 75;
				Match(OPTIONAL);
				}
			}

			State = 78;
			Match(TYPE);
			State = 79;
			Match(WORD);
			State = 81;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__8 || _la==T__9) {
				{
				State = 80;
				defaultOrFixed();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChoiceParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD() { return GetToken(AISLParser.WORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OptionListContext optionList() {
			return GetRuleContext<OptionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONAL() { return GetToken(AISLParser.OPTIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DefaultOrFixedContext defaultOrFixed() {
			return GetRuleContext<DefaultOrFixedContext>(0);
		}
		public ChoiceParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_choiceParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAISLVisitor<TResult> typedVisitor = visitor as IAISLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChoiceParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChoiceParameterContext choiceParameter() {
		ChoiceParameterContext _localctx = new ChoiceParameterContext(Context, State);
		EnterRule(_localctx, 12, RULE_choiceParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTIONAL) {
				{
				State = 83;
				Match(OPTIONAL);
				}
			}

			State = 86;
			Match(T__6);
			State = 87;
			Match(WORD);
			State = 88;
			Match(T__7);
			State = 89;
			optionList();
			State = 91;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__8 || _la==T__9) {
				{
				State = 90;
				defaultOrFixed();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultOrFixedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DefaultParamValueContext defaultParamValue() {
			return GetRuleContext<DefaultParamValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FixedParamValueContext fixedParamValue() {
			return GetRuleContext<FixedParamValueContext>(0);
		}
		public DefaultOrFixedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultOrFixed; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAISLVisitor<TResult> typedVisitor = visitor as IAISLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultOrFixed(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultOrFixedContext defaultOrFixed() {
		DefaultOrFixedContext _localctx = new DefaultOrFixedContext(Context, State);
		EnterRule(_localctx, 14, RULE_defaultOrFixed);
		try {
			State = 95;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__8:
				EnterOuterAlt(_localctx, 1);
				{
				State = 93;
				defaultParamValue();
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 2);
				{
				State = 94;
				fixedParamValue();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultParamValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueOrStringContext valueOrString() {
			return GetRuleContext<ValueOrStringContext>(0);
		}
		public DefaultParamValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultParamValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAISLVisitor<TResult> typedVisitor = visitor as IAISLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultParamValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultParamValueContext defaultParamValue() {
		DefaultParamValueContext _localctx = new DefaultParamValueContext(Context, State);
		EnterRule(_localctx, 16, RULE_defaultParamValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97;
			Match(T__8);
			State = 98;
			valueOrString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FixedParamValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueOrStringContext valueOrString() {
			return GetRuleContext<ValueOrStringContext>(0);
		}
		public FixedParamValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixedParamValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAISLVisitor<TResult> typedVisitor = visitor as IAISLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFixedParamValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FixedParamValueContext fixedParamValue() {
		FixedParamValueContext _localctx = new FixedParamValueContext(Context, State);
		EnterRule(_localctx, 18, RULE_fixedParamValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100;
			Match(T__9);
			State = 101;
			valueOrString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UninstallInstructionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTED_TEXT() { return GetToken(AISLParser.QUOTED_TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINE_END() { return GetToken(AISLParser.LINE_END, 0); }
		public UninstallInstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uninstallInstruction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAISLVisitor<TResult> typedVisitor = visitor as IAISLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUninstallInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UninstallInstructionContext uninstallInstruction() {
		UninstallInstructionContext _localctx = new UninstallInstructionContext(Context, State);
		EnterRule(_localctx, 20, RULE_uninstallInstruction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103;
			Match(T__10);
			State = 104;
			Match(QUOTED_TEXT);
			State = 105;
			Match(LINE_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExecuteInstructionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTED_TEXT() { return GetToken(AISLParser.QUOTED_TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINE_END() { return GetToken(AISLParser.LINE_END, 0); }
		public ExecuteInstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_executeInstruction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAISLVisitor<TResult> typedVisitor = visitor as IAISLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecuteInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExecuteInstructionContext executeInstruction() {
		ExecuteInstructionContext _localctx = new ExecuteInstructionContext(Context, State);
		EnterRule(_localctx, 22, RULE_executeInstruction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107;
			Match(T__11);
			State = 108;
			Match(QUOTED_TEXT);
			State = 109;
			Match(T__12);
			State = 110;
			Match(LINE_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InvokeInstallInstructionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnythingContext anything() {
			return GetRuleContext<AnythingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTED_TEXT() { return GetToken(AISLParser.QUOTED_TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINE_END() { return GetToken(AISLParser.LINE_END, 0); }
		public InvokeInstallInstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_invokeInstallInstruction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAISLVisitor<TResult> typedVisitor = visitor as IAISLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInvokeInstallInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InvokeInstallInstructionContext invokeInstallInstruction() {
		InvokeInstallInstructionContext _localctx = new InvokeInstallInstructionContext(Context, State);
		EnterRule(_localctx, 24, RULE_invokeInstallInstruction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112;
			Match(T__13);
			State = 113;
			anything();
			State = 114;
			Match(T__14);
			State = 115;
			Match(QUOTED_TEXT);
			State = 116;
			Match(LINE_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InvokeUninstallInstructionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnythingContext anything() {
			return GetRuleContext<AnythingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTED_TEXT() { return GetToken(AISLParser.QUOTED_TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINE_END() { return GetToken(AISLParser.LINE_END, 0); }
		public InvokeUninstallInstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_invokeUninstallInstruction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAISLVisitor<TResult> typedVisitor = visitor as IAISLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInvokeUninstallInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InvokeUninstallInstructionContext invokeUninstallInstruction() {
		InvokeUninstallInstructionContext _localctx = new InvokeUninstallInstructionContext(Context, State);
		EnterRule(_localctx, 26, RULE_invokeUninstallInstruction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118;
			Match(T__15);
			State = 119;
			anything();
			State = 120;
			Match(T__14);
			State = 121;
			Match(QUOTED_TEXT);
			State = 122;
			Match(LINE_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnythingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ANY_AND_ESCAPED_CURLY() { return GetTokens(AISLParser.ANY_AND_ESCAPED_CURLY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY_AND_ESCAPED_CURLY(int i) {
			return GetToken(AISLParser.ANY_AND_ESCAPED_CURLY, i);
		}
		public AnythingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anything; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAISLVisitor<TResult> typedVisitor = visitor as IAISLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnything(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnythingContext anything() {
		AnythingContext _localctx = new AnythingContext(Context, State);
		EnterRule(_localctx, 28, RULE_anything);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 125;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 124;
				Match(ANY_AND_ESCAPED_CURLY);
				}
				}
				State = 127;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==ANY_AND_ESCAPED_CURLY );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueOrStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD() { return GetToken(AISLParser.WORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTED_TEXT() { return GetToken(AISLParser.QUOTED_TEXT, 0); }
		public ValueOrStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueOrString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAISLVisitor<TResult> typedVisitor = visitor as IAISLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueOrString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueOrStringContext valueOrString() {
		ValueOrStringContext _localctx = new ValueOrStringContext(Context, State);
		EnterRule(_localctx, 30, RULE_valueOrString);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129;
			_la = TokenStream.LA(1);
			if ( !(_la==WORD || _la==QUOTED_TEXT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueOrStringContext[] valueOrString() {
			return GetRuleContexts<ValueOrStringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueOrStringContext valueOrString(int i) {
			return GetRuleContext<ValueOrStringContext>(i);
		}
		public OptionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAISLVisitor<TResult> typedVisitor = visitor as IAISLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionListContext optionList() {
		OptionListContext _localctx = new OptionListContext(Context, State);
		EnterRule(_localctx, 32, RULE_optionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131;
			Match(T__16);
			State = 132;
			valueOrString();
			State = 137;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__5) {
				{
				{
				State = 133;
				Match(T__5);
				State = 134;
				valueOrString();
				}
				}
				State = 139;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 140;
			Match(T__17);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x1D', '\x91', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x3', '\x2', '\x3', 
		'\x2', '\x5', '\x2', '\'', '\n', '\x2', '\x3', '\x2', '\x5', '\x2', '*', 
		'\n', '\x2', '\x3', '\x2', '\x3', '\x2', '\x5', '\x2', '.', '\n', '\x2', 
		'\x3', '\x2', '\x5', '\x2', '\x31', '\n', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x6', '\x5', '\x46', '\n', '\x5', 
		'\r', '\x5', '\xE', '\x5', 'G', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', 
		'L', '\n', '\x6', '\x3', '\a', '\x5', '\a', 'O', '\n', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x5', '\a', 'T', '\n', '\a', '\x3', '\b', '\x5', 
		'\b', 'W', '\n', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x5', '\b', '^', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x5', 
		'\t', '\x62', '\n', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x6', '\x10', '\x80', '\n', 
		'\x10', '\r', '\x10', '\xE', '\x10', '\x81', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\a', '\x12', 
		'\x8A', '\n', '\x12', '\f', '\x12', '\xE', '\x12', '\x8D', '\v', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x2', '\x2', '\x13', '\x2', 
		'\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', 
		'\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '\x2', '\x3', '\x3', '\x2', 
		'\x16', '\x17', '\x2', '\x8C', '\x2', '$', '\x3', '\x2', '\x2', '\x2', 
		'\x4', '\x34', '\x3', '\x2', '\x2', '\x2', '\x6', ':', '\x3', '\x2', '\x2', 
		'\x2', '\b', '\x45', '\x3', '\x2', '\x2', '\x2', '\n', 'K', '\x3', '\x2', 
		'\x2', '\x2', '\f', 'N', '\x3', '\x2', '\x2', '\x2', '\xE', 'V', '\x3', 
		'\x2', '\x2', '\x2', '\x10', '\x61', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'\x63', '\x3', '\x2', '\x2', '\x2', '\x14', '\x66', '\x3', '\x2', '\x2', 
		'\x2', '\x16', 'i', '\x3', '\x2', '\x2', '\x2', '\x18', 'm', '\x3', '\x2', 
		'\x2', '\x2', '\x1A', 'r', '\x3', '\x2', '\x2', '\x2', '\x1C', 'x', '\x3', 
		'\x2', '\x2', '\x2', '\x1E', '\x7F', '\x3', '\x2', '\x2', '\x2', ' ', 
		'\x83', '\x3', '\x2', '\x2', '\x2', '\"', '\x85', '\x3', '\x2', '\x2', 
		'\x2', '$', '&', '\x5', '\x4', '\x3', '\x2', '%', '\'', '\x5', '\x6', 
		'\x4', '\x2', '&', '%', '\x3', '\x2', '\x2', '\x2', '&', '\'', '\x3', 
		'\x2', '\x2', '\x2', '\'', ')', '\x3', '\x2', '\x2', '\x2', '(', '*', 
		'\x5', '\x16', '\f', '\x2', ')', '(', '\x3', '\x2', '\x2', '\x2', ')', 
		'*', '\x3', '\x2', '\x2', '\x2', '*', '+', '\x3', '\x2', '\x2', '\x2', 
		'+', '-', '\x5', '\x18', '\r', '\x2', ',', '.', '\x5', '\x1A', '\xE', 
		'\x2', '-', ',', '\x3', '\x2', '\x2', '\x2', '-', '.', '\x3', '\x2', '\x2', 
		'\x2', '.', '\x30', '\x3', '\x2', '\x2', '\x2', '/', '\x31', '\x5', '\x1C', 
		'\xF', '\x2', '\x30', '/', '\x3', '\x2', '\x2', '\x2', '\x30', '\x31', 
		'\x3', '\x2', '\x2', '\x2', '\x31', '\x32', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\x33', '\a', '\x2', '\x2', '\x3', '\x33', '\x3', '\x3', '\x2', 
		'\x2', '\x2', '\x34', '\x35', '\a', '\x3', '\x2', '\x2', '\x35', '\x36', 
		'\a', '\x17', '\x2', '\x2', '\x36', '\x37', '\a', '\x4', '\x2', '\x2', 
		'\x37', '\x38', '\a', '\x17', '\x2', '\x2', '\x38', '\x39', '\a', '\x1B', 
		'\x2', '\x2', '\x39', '\x5', '\x3', '\x2', '\x2', '\x2', ':', ';', '\a', 
		'\x5', '\x2', '\x2', ';', '<', '\a', '\x1C', '\x2', '\x2', '<', '=', '\x5', 
		'\b', '\x5', '\x2', '=', '>', '\a', '\x6', '\x2', '\x2', '>', '?', '\a', 
		'\x1B', '\x2', '\x2', '?', '\a', '\x3', '\x2', '\x2', '\x2', '@', '\x41', 
		'\a', '\a', '\x2', '\x2', '\x41', '\x42', '\x5', '\n', '\x6', '\x2', '\x42', 
		'\x43', '\a', '\b', '\x2', '\x2', '\x43', '\x44', '\a', '\x1C', '\x2', 
		'\x2', '\x44', '\x46', '\x3', '\x2', '\x2', '\x2', '\x45', '@', '\x3', 
		'\x2', '\x2', '\x2', '\x46', 'G', '\x3', '\x2', '\x2', '\x2', 'G', '\x45', 
		'\x3', '\x2', '\x2', '\x2', 'G', 'H', '\x3', '\x2', '\x2', '\x2', 'H', 
		'\t', '\x3', '\x2', '\x2', '\x2', 'I', 'L', '\x5', '\xE', '\b', '\x2', 
		'J', 'L', '\x5', '\f', '\a', '\x2', 'K', 'I', '\x3', '\x2', '\x2', '\x2', 
		'K', 'J', '\x3', '\x2', '\x2', '\x2', 'L', '\v', '\x3', '\x2', '\x2', 
		'\x2', 'M', 'O', '\a', '\x18', '\x2', '\x2', 'N', 'M', '\x3', '\x2', '\x2', 
		'\x2', 'N', 'O', '\x3', '\x2', '\x2', '\x2', 'O', 'P', '\x3', '\x2', '\x2', 
		'\x2', 'P', 'Q', '\a', '\x15', '\x2', '\x2', 'Q', 'S', '\a', '\x16', '\x2', 
		'\x2', 'R', 'T', '\x5', '\x10', '\t', '\x2', 'S', 'R', '\x3', '\x2', '\x2', 
		'\x2', 'S', 'T', '\x3', '\x2', '\x2', '\x2', 'T', '\r', '\x3', '\x2', 
		'\x2', '\x2', 'U', 'W', '\a', '\x18', '\x2', '\x2', 'V', 'U', '\x3', '\x2', 
		'\x2', '\x2', 'V', 'W', '\x3', '\x2', '\x2', '\x2', 'W', 'X', '\x3', '\x2', 
		'\x2', '\x2', 'X', 'Y', '\a', '\t', '\x2', '\x2', 'Y', 'Z', '\a', '\x16', 
		'\x2', '\x2', 'Z', '[', '\a', '\n', '\x2', '\x2', '[', ']', '\x5', '\"', 
		'\x12', '\x2', '\\', '^', '\x5', '\x10', '\t', '\x2', ']', '\\', '\x3', 
		'\x2', '\x2', '\x2', ']', '^', '\x3', '\x2', '\x2', '\x2', '^', '\xF', 
		'\x3', '\x2', '\x2', '\x2', '_', '\x62', '\x5', '\x12', '\n', '\x2', '`', 
		'\x62', '\x5', '\x14', '\v', '\x2', '\x61', '_', '\x3', '\x2', '\x2', 
		'\x2', '\x61', '`', '\x3', '\x2', '\x2', '\x2', '\x62', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '\x63', '\x64', '\a', '\v', '\x2', '\x2', '\x64', 
		'\x65', '\x5', ' ', '\x11', '\x2', '\x65', '\x13', '\x3', '\x2', '\x2', 
		'\x2', '\x66', 'g', '\a', '\f', '\x2', '\x2', 'g', 'h', '\x5', ' ', '\x11', 
		'\x2', 'h', '\x15', '\x3', '\x2', '\x2', '\x2', 'i', 'j', '\a', '\r', 
		'\x2', '\x2', 'j', 'k', '\a', '\x17', '\x2', '\x2', 'k', 'l', '\a', '\x1B', 
		'\x2', '\x2', 'l', '\x17', '\x3', '\x2', '\x2', '\x2', 'm', 'n', '\a', 
		'\xE', '\x2', '\x2', 'n', 'o', '\a', '\x17', '\x2', '\x2', 'o', 'p', '\a', 
		'\xF', '\x2', '\x2', 'p', 'q', '\a', '\x1B', '\x2', '\x2', 'q', '\x19', 
		'\x3', '\x2', '\x2', '\x2', 'r', 's', '\a', '\x10', '\x2', '\x2', 's', 
		't', '\x5', '\x1E', '\x10', '\x2', 't', 'u', '\a', '\x11', '\x2', '\x2', 
		'u', 'v', '\a', '\x17', '\x2', '\x2', 'v', 'w', '\a', '\x1B', '\x2', '\x2', 
		'w', '\x1B', '\x3', '\x2', '\x2', '\x2', 'x', 'y', '\a', '\x12', '\x2', 
		'\x2', 'y', 'z', '\x5', '\x1E', '\x10', '\x2', 'z', '{', '\a', '\x11', 
		'\x2', '\x2', '{', '|', '\a', '\x17', '\x2', '\x2', '|', '}', '\a', '\x1B', 
		'\x2', '\x2', '}', '\x1D', '\x3', '\x2', '\x2', '\x2', '~', '\x80', '\a', 
		'\x1A', '\x2', '\x2', '\x7F', '~', '\x3', '\x2', '\x2', '\x2', '\x80', 
		'\x81', '\x3', '\x2', '\x2', '\x2', '\x81', '\x7F', '\x3', '\x2', '\x2', 
		'\x2', '\x81', '\x82', '\x3', '\x2', '\x2', '\x2', '\x82', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '\x83', '\x84', '\t', '\x2', '\x2', '\x2', '\x84', 
		'!', '\x3', '\x2', '\x2', '\x2', '\x85', '\x86', '\a', '\x13', '\x2', 
		'\x2', '\x86', '\x8B', '\x5', ' ', '\x11', '\x2', '\x87', '\x88', '\a', 
		'\b', '\x2', '\x2', '\x88', '\x8A', '\x5', ' ', '\x11', '\x2', '\x89', 
		'\x87', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x8D', '\x3', '\x2', '\x2', 
		'\x2', '\x8B', '\x89', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x8C', '\x3', 
		'\x2', '\x2', '\x2', '\x8C', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x8D', 
		'\x8B', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x8F', '\a', '\x14', '\x2', 
		'\x2', '\x8F', '#', '\x3', '\x2', '\x2', '\x2', '\xF', '&', ')', '-', 
		'\x30', 'G', 'K', 'N', 'S', 'V', ']', '\x61', '\x81', '\x8B',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
